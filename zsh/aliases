alias ls='ls -a'
alias mkdir='mkdir -p'
alias path='echo $PATH | tr -s ":" "\n"'

alias work='cd ~/repos/govly;'
alias dotfiles='cd ~/dotfiles;'

alias gits='git status'
alias gitc='git cm'
alias gita='git add'

alias c="windsurf"

if command -v code-insiders &> /dev/null; then
  alias code="code-insiders"
fi

# Define the code function
function code() {
  command code "$@"
}

function brs() {
  git for-each-ref --sort=-committerdate --format="%(committerdate:short) | %(authorname) | %(refname:short)" refs/heads/
}

function br() {
  gh pr list --state open --json headRefName,author --jq '.[] | "\(.author.login) \(.headRefName)"' | \
  sort | \
  awk '
  BEGIN {
    GREEN="\033[0;32m";
    CYAN="\033[0;36m";
    RESET="\033[0m";
    current_owner="";
  }
  {
    if ($1 != current_owner) {
      current_owner = $1;
      printf "\n%s%s%s\n", CYAN, current_owner, RESET;
    }
    printf "  %s%s%s\n", GREEN, $2, RESET;
  }
  '
}



function issue() {
  gh issue develop "$1" --checkout
}

function pr() {
  local branch
  branch=$(git symbolic-ref --short HEAD)

  local pr_url
  pr_url=$(gh pr view --json url --jq .url 2>/dev/null)

  if [[ -n $pr_url ]]; then
    gh pr view --web
  else
    gh pr create --draft
  fi
}


function rails() {
  if [ -f "bin/rails" ]; then
    ./bin/rails "$@"
  else
    command rails "$@"
  fi
}
